class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        // int memo[] = new int[n];
        // Arrays.fill(memo, Integer.MAX_VALUE);
        // return Math.min(minCost(n-1, cost, memo), minCost(n-2, cost, memo));
        int dp[] = new int[n];
        dp[0] = cost[0]; dp[1] = cost[1];
        for(int i = 2; i < n ; i++){
            dp[i] = cost[i] + Math.min(dp[i-1], dp[i-2]);
        }
        return Math.min(dp[n-1], dp[n-2]);
    }

    public int minCost(int i, int[] cost, int[] memo){
        if(i == 1 || i == 0){
            return cost[i];
        }

        if(memo[i] < Integer.MAX_VALUE){
            return memo[i];
        }
        memo[i] = cost[i] + Math.min(minCost(i-1, cost, memo), minCost(i-2, cost, memo));
        return memo[i];
    }
}
