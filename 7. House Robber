class Solution {
    public int rob(int[] nums) {
        int memo[] = new int[nums.length];
        Arrays.fill(memo, -1);
        return helper(0, memo, nums);
    }

    public int helper(int i, int []memo, int []nums){
        if(i >= nums.length){
            return 0;
        }
        if(memo[i] != -1) return memo[i];
        int pick = nums[i] + helper(i+2, memo, nums);
        int skip = helper(i+1, memo, nums);
        return memo[i] = Math.max(pick, skip);
    }
}
-------------------------------------------------------------------------------------Tabulation--------------------------------------------------------------------------
public int tabulation(int nums[]){
        int n = nums.length;
        if(n == 1) return nums[0];
        if(n == 2) return Math.max(nums[0], nums[1]);
        int dp[] = new int[n];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for(int i = 2; i < n; i++){
            dp[i] = Math.max(dp[i-1], nums[i]+dp[i-2]);
        }
        return dp[n-1];
    }
