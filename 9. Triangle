class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int [][]dp = new int[n][n];
        for(int[] i : dp){
            Arrays.fill(i, -1);
        }

        return helper(0, 0, n, triangle, dp);
    }

    public static int helper(int i, int j, int n, List<List<Integer>> triangle, int[][] dp){

        if(i == n-1){
            return triangle.get(i).get(j);
        }
        if(dp[i][j] != -1) return dp[i][j];

        int down = triangle.get(i).get(j) + helper(i+1, j, n, triangle, dp);
        int diag = triangle.get(i).get(j) + helper(i+1, j+1, n, triangle, dp);

        return dp[i][j] = Math.min(down, diag);
    }
        
}
-------------------------------------------------------Tabulation------------------------------------------------------
class Solution {    
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        List<List<Integer>> dp = new ArrayList<>();
        if(n == 1) return triangle.get(0).get(0);

        for(int i = 0; i < n; i++){
            dp.add(new ArrayList<>());
            for(int j = 0; j <= i; j++){
                dp.get(i).add(0);
                if(j == 0){
                    if(i == 0){
                        dp.get(i).set(j, triangle.get(i).get(j));
                    }
                    else dp.get(i).set(j, dp.get(i-1).get(j)+triangle.get(i).get(j));
                    
                }
                if(i == j && i != 0){
                    dp.get(i).set(j, dp.get(i-1).get(j-1)+triangle.get(i).get(j));
                }
                if(i > 0 && j > 0 && i != j){
                    dp.get(i).set(j, triangle.get(i).get(j)+Math.min(dp.get(i-1).get(j-1), dp.get(i-1).get(j)));
                }
            }
        }
        return dp.get(n-1).stream().mapToInt(Integer::intValue).min().getAsInt();
    }
}
